#include "SDL2_Utils.h"

#include "Debug.h"

using namespace Gadget;

//This feels pretty stupid
ButtonID SDL2_Utils::ConvertSDLKeycodeToButtonID(SDL_Keycode key_){
	switch(key_){
		case SDLK_UNKNOWN:
			return ButtonID::Keyboard_Unknown;
		case SDLK_RETURN:
			return ButtonID::Keyboard_Return;
		case SDLK_ESCAPE:
			return ButtonID::Keyboard_Escape;
		case SDLK_BACKSPACE:
			return ButtonID::Keyboard_Backspace;
		case SDLK_TAB:
			return ButtonID::Keyboard_Tab;
		case SDLK_SPACE:
			return ButtonID::Keyboard_Space;
		case SDLK_EXCLAIM:
			return ButtonID::Keyboard_Exclaim;
		case SDLK_DBLAPOSTROPHE:
			return ButtonID::Keyboard_QuoteDouble;
		case SDLK_HASH:
			return ButtonID::Keyboard_Hash;
		case SDLK_PERCENT:
			return ButtonID::Keyboard_Percent;
		case SDLK_DOLLAR:
			return ButtonID::Keyboard_Dollar;
		case SDLK_AMPERSAND:
			return ButtonID::Keyboard_Ampersand;
		case SDLK_APOSTROPHE:
			return ButtonID::Keyboard_Quote;
		case SDLK_LEFTPAREN:
			return ButtonID::Keyboard_LeftParenthesis;
		case SDLK_RIGHTPAREN:
			return ButtonID::Keyboard_RightParenthesis;
		case SDLK_ASTERISK:
			return ButtonID::Keyboard_Asterisk;
		case SDLK_PLUS:
			return ButtonID::Keyboard_Plus;
		case SDLK_COMMA:
			return ButtonID::Keyboard_Comma;
		case SDLK_MINUS:
			return ButtonID::Keyboard_Minus;
		case SDLK_PERIOD:
			return ButtonID::Keyboard_Period;
		case SDLK_SLASH:
			return ButtonID::Keyboard_Slash;
		case SDLK_0:
			return ButtonID::Keyboard_0;
		case SDLK_1:
			return ButtonID::Keyboard_1;
		case SDLK_2:
			return ButtonID::Keyboard_2;
		case SDLK_3:
			return ButtonID::Keyboard_3;
		case SDLK_4:
			return ButtonID::Keyboard_4;
		case SDLK_5:
			return ButtonID::Keyboard_5;
		case SDLK_6:
			return ButtonID::Keyboard_6;
		case SDLK_7:
			return ButtonID::Keyboard_7;
		case SDLK_8:
			return ButtonID::Keyboard_8;
		case SDLK_9:
			return ButtonID::Keyboard_9;
		case SDLK_COLON:
			return ButtonID::Keyboard_Colon;
		case SDLK_SEMICOLON:
			return ButtonID::Keyboard_SemiColon;
		case SDLK_LESS:
			return ButtonID::Keyboard_LessThan;
		case SDLK_EQUALS:
			return ButtonID::Keyboard_Equals;
		case SDLK_GREATER:
			return ButtonID::Keyboard_GreaterThan;
		case SDLK_QUESTION:
			return ButtonID::Keyboard_Question;
		case SDLK_AT:
			return ButtonID::Keyboard_AT;
		case SDLK_LEFTBRACKET:
			return ButtonID::Keyboard_LeftBracket;
		case SDLK_BACKSLASH:
			return ButtonID::Keyboard_Backslash;
		case SDLK_RIGHTBRACKET:
			return ButtonID::Keyboard_RightBracket;
		case SDLK_CARET:
			return ButtonID::Keyboard_Caret;
		case SDLK_UNDERSCORE:
			return ButtonID::Keyboard_Underscore;
		case SDLK_GRAVE:
			return ButtonID::Keyboard_BackQuote;
		case SDLK_A:
			return ButtonID::Keyboard_A;
		case SDLK_B:
			return ButtonID::Keyboard_B;
		case SDLK_C:
			return ButtonID::Keyboard_C;
		case SDLK_D:
			return ButtonID::Keyboard_D;
		case SDLK_E:
			return ButtonID::Keyboard_E;
		case SDLK_F:
			return ButtonID::Keyboard_F;
		case SDLK_G:
			return ButtonID::Keyboard_G;
		case SDLK_H:
			return ButtonID::Keyboard_H;
		case SDLK_I:
			return ButtonID::Keyboard_I;
		case SDLK_J:
			return ButtonID::Keyboard_J;
		case SDLK_K:
			return ButtonID::Keyboard_K;
		case SDLK_L:
			return ButtonID::Keyboard_L;
		case SDLK_M:
			return ButtonID::Keyboard_M;
		case SDLK_N:
			return ButtonID::Keyboard_N;
		case SDLK_O:
			return ButtonID::Keyboard_O;
		case SDLK_P:
			return ButtonID::Keyboard_P;
		case SDLK_Q:
			return ButtonID::Keyboard_Q;
		case SDLK_R:
			return ButtonID::Keyboard_R;
		case SDLK_S:
			return ButtonID::Keyboard_S;
		case SDLK_T:
			return ButtonID::Keyboard_T;
		case SDLK_U:
			return ButtonID::Keyboard_U;
		case SDLK_V:
			return ButtonID::Keyboard_V;
		case SDLK_W:
			return ButtonID::Keyboard_W;
		case SDLK_X:
			return ButtonID::Keyboard_X;
		case SDLK_Y:
			return ButtonID::Keyboard_Y;
		case SDLK_Z:
			return ButtonID::Keyboard_Z;
		case SDLK_CAPSLOCK:
			return ButtonID::Keyboard_CapsLock;
		case SDLK_F1:
			return ButtonID::Keyboard_F1;
		case SDLK_F2:
			return ButtonID::Keyboard_F2;
		case SDLK_F3:
			return ButtonID::Keyboard_F3;
		case SDLK_F4:
			return ButtonID::Keyboard_F4;
		case SDLK_F5:
			return ButtonID::Keyboard_F5;
		case SDLK_F6:
			return ButtonID::Keyboard_F6;
		case SDLK_F7:
			return ButtonID::Keyboard_F7;
		case SDLK_F8:
			return ButtonID::Keyboard_F8;
		case SDLK_F9:
			return ButtonID::Keyboard_F9;
		case SDLK_F10:
			return ButtonID::Keyboard_F10;
		case SDLK_F11:
			return ButtonID::Keyboard_F11;
		case SDLK_F12:
			return ButtonID::Keyboard_F12;
		case SDLK_PRINTSCREEN:
			return ButtonID::Keyboard_PrintScreen;
		case SDLK_SCROLLLOCK:
			return ButtonID::Keyboard_ScrollLock;
		case SDLK_PAUSE:
			return ButtonID::Keyboard_Pause;
		case SDLK_INSERT:
			return ButtonID::Keyboard_Insert;
		case SDLK_HOME:
			return ButtonID::Keyboard_Home;
		case SDLK_PAGEUP:
			return ButtonID::Keyboard_PageUp;
		case SDLK_DELETE:
			return ButtonID::Keyboard_Delete;
		case SDLK_END:
			return ButtonID::Keyboard_End;
		case SDLK_PAGEDOWN:
			return ButtonID::Keyboard_PageDown;
		case SDLK_RIGHT:
			return ButtonID::Keyboard_Arrow_Right;
		case SDLK_LEFT:
			return ButtonID::Keyboard_Arrow_Left;
		case SDLK_DOWN:
			return ButtonID::Keyboard_Arrow_Down;
		case SDLK_UP:
			return ButtonID::Keyboard_Arrow_Up;
		case SDLK_NUMLOCKCLEAR:
			return ButtonID::Keyboard_NumLock;
		case SDLK_KP_DIVIDE:
			return ButtonID::Keyboard_Keypad_Divide;
		case SDLK_KP_MULTIPLY:
			return ButtonID::Keyboard_Keypad_Multiply;
		case SDLK_KP_PLUS:
			return ButtonID::Keyboard_Keypad_Plus;
		case SDLK_KP_ENTER:
			return ButtonID::Keyboard_Keypad_Enter;
		case SDLK_KP_1:
			return ButtonID::Keyboard_Keypad_1;
		case SDLK_KP_2:
			return ButtonID::Keyboard_Keypad_2;
		case SDLK_KP_3:
			return ButtonID::Keyboard_Keypad_3;
		case SDLK_KP_4:
			return ButtonID::Keyboard_Keypad_4;
		case SDLK_KP_5:
			return ButtonID::Keyboard_Keypad_5;
		case SDLK_KP_6:
			return ButtonID::Keyboard_Keypad_6;
		case SDLK_KP_7:
			return ButtonID::Keyboard_Keypad_7;
		case SDLK_KP_8:
			return ButtonID::Keyboard_Keypad_8;
		case SDLK_KP_9:
			return ButtonID::Keyboard_Keypad_9;
		case SDLK_KP_0:
			return ButtonID::Keyboard_Keypad_0;
		case SDLK_KP_PERIOD:
			return ButtonID::Keyboard_Keypad_Period;
		case SDLK_APPLICATION:
			return ButtonID::Keyboard_Application;
		case SDLK_POWER:
			return ButtonID::Keyboard_Power;
		case SDLK_KP_EQUALS:
			return ButtonID::Keyboard_Keypad_Equal;
		case SDLK_F13:
			return ButtonID::Keyboard_F13;
		case SDLK_F14:
			return ButtonID::Keyboard_F14;
		case SDLK_F15:
			return ButtonID::Keyboard_F15;
		case SDLK_F16:
			return ButtonID::Keyboard_F16;
		case SDLK_F17:
			return ButtonID::Keyboard_F17;
		case SDLK_F18:
			return ButtonID::Keyboard_F18;
		case SDLK_F19:
			return ButtonID::Keyboard_F19;
		case SDLK_F20:
			return ButtonID::Keyboard_F20;
		case SDLK_F21:
			return ButtonID::Keyboard_F21;
		case SDLK_F22:
			return ButtonID::Keyboard_F22;
		case SDLK_F23:
			return ButtonID::Keyboard_F23;
		case SDLK_F24:
			return ButtonID::Keyboard_F24;
		case SDLK_EXECUTE:
			return ButtonID::Keyboard_Execute;
		case SDLK_HELP:
			return ButtonID::Keyboard_Help;
		case SDLK_MENU:
			return ButtonID::Keyboard_Menu;
		case SDLK_SELECT:
			return ButtonID::Keyboard_Select;
		case SDLK_STOP:
			return ButtonID::Keyboard_Stop;
		case SDLK_AGAIN:
			return ButtonID::Keyboard_Again;
		case SDLK_UNDO:
			return ButtonID::Keyboard_Undo;
		case SDLK_CUT:
			return ButtonID::Keyboard_Cut;
		case SDLK_COPY:
			return ButtonID::Keyboard_Copy;
		case SDLK_PASTE:
			return ButtonID::Keyboard_Paste;
		case SDLK_FIND:
			return ButtonID::Keyboard_Find;
		case SDLK_MUTE:
			return ButtonID::Keyboard_Mute;
		case SDLK_VOLUMEUP:
			return ButtonID::Keyboard_VolumeUp;
		case SDLK_VOLUMEDOWN:
			return ButtonID::Keyboard_VolumeDown;
		case SDLK_KP_COMMA:
			return ButtonID::Keyboard_Keypad_Comma;
		case SDLK_KP_EQUALSAS400:
			return ButtonID::Keyboard_Keypad_Equal_AS400;
		case SDLK_ALTERASE:
			return ButtonID::Keyboard_AltErase;
		case SDLK_SYSREQ:
			return ButtonID::Keyboard_SysReq;
		case SDLK_CANCEL:
			return ButtonID::Keyboard_Cancel;
		case SDLK_CLEAR:
			return ButtonID::Keyboard_Clear;
		case SDLK_PRIOR:
			return ButtonID::Keyboard_Prior;
		case SDLK_RETURN2:
			return ButtonID::Keyboard_Return2;
		case SDLK_SEPARATOR:
			return ButtonID::Keyboard_Separator;
		case SDLK_OUT:
			return ButtonID::Keyboard_Out;
		case SDLK_OPER:
			return ButtonID::Keyboard_Oper;
		case SDLK_CLEARAGAIN:
			return ButtonID::Keyboard_ClearAgain;
		case SDLK_CRSEL:
			return ButtonID::Keyboard_CrSel;
		case SDLK_EXSEL:
			return ButtonID::Keyboard_ExSel;
		case SDLK_KP_00:
			return ButtonID::Keyboard_Keypad_00;
		case SDLK_KP_000:
			return ButtonID::Keyboard_Keypad_000;
		case SDLK_THOUSANDSSEPARATOR:
			return ButtonID::Keyboard_ThousandsSeparator;
		case SDLK_DECIMALSEPARATOR:
			return ButtonID::Keyboard_DecimalSeparator;
		case SDLK_CURRENCYUNIT:
			return ButtonID::Keyboard_CurrencyUnit;
		case SDLK_CURRENCYSUBUNIT:
			return ButtonID::Keyboard_CurrencySubUnit;
		case SDLK_KP_LEFTPAREN:
			return ButtonID::Keyboard_Keypad_LeftParenthesis;
		case SDLK_KP_RIGHTPAREN:
			return ButtonID::Keyboard_Keypad_RightParenthesis;
		case SDLK_KP_LEFTBRACE:
			return ButtonID::Keyboard_Keypad_LeftBrace;
		case SDLK_KP_RIGHTBRACE:
			return ButtonID::Keyboard_Keypad_RightBrace;
		case SDLK_KP_TAB:
			return ButtonID::Keyboard_Keypad_Tab;
		case SDLK_KP_BACKSPACE:
			return ButtonID::Keyboard_Keypad_Backspace;
		case SDLK_KP_A:
			return ButtonID::Keyboard_Keypad_A;
		case SDLK_KP_B:
			return ButtonID::Keyboard_Keypad_B;
		case SDLK_KP_C:
			return ButtonID::Keyboard_Keypad_C;
		case SDLK_KP_D:
			return ButtonID::Keyboard_Keypad_D;
		case SDLK_KP_E:
			return ButtonID::Keyboard_Keypad_E;
		case SDLK_KP_F:
			return ButtonID::Keyboard_Keypad_F;
		case SDLK_KP_XOR:
			return ButtonID::Keyboard_Keypad_XOR;
		case SDLK_KP_POWER:
			return ButtonID::Keyboard_Keypad_Power;
		case SDLK_KP_PERCENT:
			return ButtonID::Keyboard_Keypad_Percent;
		case SDLK_KP_LESS:
			return ButtonID::Keyboard_Keypad_LessThan;
		case SDLK_KP_GREATER:
			return ButtonID::Keyboard_GreaterThan;
		case SDLK_KP_AMPERSAND:
			return ButtonID::Keyboard_Keypad_Ampersand;
		case SDLK_KP_DBLAMPERSAND:
			return ButtonID::Keyboard_Keypad_DoubleAmpersand;
		case SDLK_KP_VERTICALBAR:
			return ButtonID::Keyboard_Keypad_VerticalBar;
		case SDLK_KP_DBLVERTICALBAR:
			return ButtonID::Keyboard_Keypad_DoubleVerticalBar;
		case SDLK_KP_COLON:
			return ButtonID::Keyboard_Keypad_Colon;
		case SDLK_KP_HASH:
			return ButtonID::Keyboard_Keypad_Hash;
		case SDLK_KP_SPACE:
			return ButtonID::Keyboard_Keypad_Space;
		case SDLK_KP_AT:
			return ButtonID::Keyboard_Keypad_AT;
		case SDLK_KP_EXCLAM:
			return ButtonID::Keyboard_Keypad_Exclamation;
		case SDLK_KP_MEMSTORE:
			return ButtonID::Keyboard_Keypad_MemStore;
		case SDLK_KP_MEMRECALL:
			return ButtonID::Keyboard_Keypad_MemRecall;
		case SDLK_KP_MEMCLEAR:
			return ButtonID::Keyboard_Keypad_MemClear;
		case SDLK_KP_MEMADD:
			return ButtonID::Keyboard_Keypad_MemAdd;
		case SDLK_KP_MEMSUBTRACT:
			return ButtonID::Keyboard_Keypad_MemSubtract;
		case SDLK_KP_MEMMULTIPLY:
			return ButtonID::Keyboard_Keypad_MemMultiply;
		case SDLK_KP_MEMDIVIDE:
			return ButtonID::Keyboard_Keypad_MemDivide;
		case SDLK_KP_PLUSMINUS:
			return ButtonID::Keyboard_Keypad_PlusMinus;
		case SDLK_KP_CLEAR:
			return ButtonID::Keyboard_Keypad_Clear;
		case SDLK_KP_CLEARENTRY:
			return ButtonID::Keyboard_Keypad_ClearEntry;
		case SDLK_KP_BINARY:
			return ButtonID::Keyboard_Keypad_Binary;
		case SDLK_KP_OCTAL:
			return ButtonID::Keyboard_Keypad_Octal;
		case SDLK_KP_DECIMAL:
			return ButtonID::Keyboard_Keypad_Decimal;
		case SDLK_KP_HEXADECIMAL:
			return ButtonID::Keyboard_Keypad_Hexadecimal;
		case SDLK_LCTRL:
			return ButtonID::Keyboard_LeftCtrl;
		case SDLK_LSHIFT:
			return ButtonID::Keyboard_LeftShift;
		case SDLK_LALT:
			return ButtonID::Keyboard_LeftAlt;
		case SDLK_LGUI:
			return ButtonID::Keyboard_LeftGUI;
		case SDLK_RCTRL:
			return ButtonID::Keyboard_RightCtrl;
		case SDLK_RSHIFT:
			return ButtonID::Keyboard_RightShift;
		case SDLK_RALT:
			return ButtonID::Keyboard_RightAlt;
		case SDLK_RGUI:
			return ButtonID::Keyboard_RightGUI;
		case SDLK_MODE:
			return ButtonID::Keyboard_ModeSwitch;
		case SDLK_MEDIA_NEXT_TRACK:
			return ButtonID::Keyboard_Audio_Next;
		case SDLK_MEDIA_PREVIOUS_TRACK:
			return ButtonID::Keyboard_Audio_Previous;
		case SDLK_MEDIA_STOP:
			return ButtonID::Keyboard_Audio_Stop;
		case SDLK_MEDIA_PLAY:
			return ButtonID::Keyboard_Audio_Play;
		//case SDLK_MUTE:
		//	return ButtonID::Keyboard_Audio_Mute;
		case SDLK_MEDIA_SELECT:
			return ButtonID::Keyboard_MediaSelect;
		//case SDLK_WWW:
		//	return ButtonID::Keyboard_WWW;
		//case SDLK_MAIL:
		//	return ButtonID::Keyboard_Mail;
		//case SDLK_CALCULATOR:
		//	return ButtonID::Keyboard_Calculator;
		//case SDLK_COMPUTER:
		//	return ButtonID::Keyboard_Computer;
		case SDLK_AC_SEARCH:
			return ButtonID::Keyboard_ApplicationControl_Search;
		case SDLK_AC_HOME:
			return ButtonID::Keyboard_ApplicationControl_Home;
		case SDLK_AC_BACK:
			return ButtonID::Keyboard_ApplicationControl_Back;
		case SDLK_AC_FORWARD:
			return ButtonID::Keyboard_ApplicationControl_Forward;
		case SDLK_AC_STOP:
			return ButtonID::Keyboard_ApplicationControl_Stop;
		case SDLK_AC_REFRESH:
			return ButtonID::Keyboard_ApplicationControl_Refresh;
		case SDLK_AC_BOOKMARKS:
			return ButtonID::Keyboard_ApplicationControl_Bookmarks;
		//case SDLK_BRIGHTNESSDOWN:
		//	return ButtonID::Keyboard_Brightness_Down;
		//case SDLK_BRIGHTNESSUP:
		//	return ButtonID::Keyboard_Brightness_Up;
		//case SDLK_DISPLAYSWITCH:
		//	return ButtonID::Keyboard_DisplaySwitch;
		//case SDLK_KBDILLUMTOGGLE:
		//	return ButtonID::Keyboard_Illumination_Toggle;
		//case SDLK_KBDILLUMDOWN:
		//	return ButtonID::Keyboard_Illumination_Down;
		//case SDLK_KBDILLUMUP:
		//	return ButtonID::Keyboard_Illumination_Up;
		case SDLK_MEDIA_EJECT:
			return ButtonID::Keyboard_Eject;
		case SDLK_SLEEP:
			return ButtonID::Keyboard_Sleep;
		//case SDLK_APP1:
		//	return ButtonID::Keyboard_App1;
		//case SDLK_APP2:
		//	return ButtonID::Keyboard_App2;
		case SDLK_MEDIA_REWIND:
			return ButtonID::Keyboard_Audio_Rewind;
		case SDLK_MEDIA_FAST_FORWARD:
			return ButtonID::Keyboard_Audio_FastForward;
		case SDLK_SOFTLEFT:
			return ButtonID::Keyboard_SoftLeft;
		case SDLK_SOFTRIGHT:
			return ButtonID::Keyboard_SoftRight;
		case SDLK_CALL:
			return ButtonID::Keyboard_Call;
		case SDLK_ENDCALL:
			return ButtonID::Keyboard_EndCall;
		default:
			Debug::Log("Unsupported keycode: " + std::to_string(key_), Debug::Error, __FILE__, __LINE__);
			break;
	}

	return ButtonID::None;
}

ButtonID SDL2_Utils::ConvertSDLMouseButtonToButtonID(Uint8 button_){
	switch(button_){
		case SDL_BUTTON_LEFT:
			return ButtonID::Mouse_LeftMouseButton;
		case SDL_BUTTON_RIGHT:
			return ButtonID::Mouse_RightMouseButton;
		case SDL_BUTTON_MIDDLE:
			return ButtonID::Mouse_MiddleMouseButton;
		case SDL_BUTTON_X1:
			return ButtonID::Mouse_Button4;
		case SDL_BUTTON_X2:
			return ButtonID::Mouse_Button5;
		default:
			Debug::Log("Unsupported mouse button index: " + std::to_string(button_), Debug::Error, __FILE__, __LINE__);
			break;
	}

	return ButtonID::None;
}

//TODO - This function needs to be a lot more sophisticated to handle other types of controllers correctly (most notably PlayStation controllers)
//For now we'll just assume XInput mappings
ButtonID SDL2_Utils::ConvertSDLJoystickButtonToButtonID(Uint8 button_){
	switch(button_){
		case 0:
			return ButtonID::Gamepad_Face_Down;
		case 1:
			return ButtonID::Gamepad_Face_Right;
		case 2:
			return ButtonID::Gamepad_Face_Left;
		case 3:
			return ButtonID::Gamepad_Face_Up;
		case 4:
			return ButtonID::Gamepad_Shoulder_Left1;
		case 5:
			return ButtonID::Gamepad_Shoulder_Right1;
		case 6:
			return ButtonID::Gamepad_Start;
		case 7:
			return ButtonID::Gamepad_Select;
		case 8:
			return ButtonID::Gamepad_AnalogClick_Left;
		case 9:
			return ButtonID::Gamepad_AnalogClick_Right;
		case 10:
			return ButtonID::Gamepad_Home;
		case 11:
			return ButtonID::Gamepad_DPad_Up;
		case 12:
			return ButtonID::Gamepad_DPad_Down;
		case 13:
			return ButtonID::Gamepad_DPad_Left;
		case 14:
			return ButtonID::Gamepad_DPad_Right;
		default:
			Debug::Log("Unsupported gamepad button index: " + std::to_string(button_), Debug::Error, __FILE__, __LINE__);
			break;
	}

	return ButtonID::None;
}

//TODO - This function needs to be a lot more sophisticated to handle other types of controllers correctly (most notably PlayStation controllers)
//For now we'll just assume XInput mappings
AxisID SDL2_Utils::ConvertSDLJoystickAxisToAxisID(Uint8 axis_){
	switch(axis_){
		case 0:
			return AxisID::Gamepad_LeftStick_Horizontal;
		case 1:
			return AxisID::Gamepad_LeftStick_Vertical;
		case 2:
			return AxisID::Gamepad_RightStick_Horizontal;
		case 3:
			return AxisID::Gamepad_RightStick_Vertical;
		case 4:
			return AxisID::Gamepad_LeftTrigger;
		case 5:
			return AxisID::Gamepad_RightTrigger;
		default:
			Debug::Log("Unsupported gamepad axis index: " + std::to_string(axis_), Debug::Error, __FILE__, __LINE__);
			break;
	}

	Debug::Log("AXIS: " + std::to_string(axis_));
	return AxisID::None;
}